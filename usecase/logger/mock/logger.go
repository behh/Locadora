// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/logger/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// LogError mocks base method.
func (m *MockUseCase) LogError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", arg0)
}

// LogError indicates an expected call of LogError.
func (mr *MockUseCaseMockRecorder) LogError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockUseCase)(nil).LogError), arg0)
}

// LogInfo mocks base method.
func (m *MockUseCase) LogInfo(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", arg0)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockUseCaseMockRecorder) LogInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockUseCase)(nil).LogInfo), arg0)
}

// LogWarning mocks base method.
func (m *MockUseCase) LogWarning(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogWarning", arg0)
}

// LogWarning indicates an expected call of LogWarning.
func (mr *MockUseCaseMockRecorder) LogWarning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogWarning", reflect.TypeOf((*MockUseCase)(nil).LogWarning), arg0)
}
